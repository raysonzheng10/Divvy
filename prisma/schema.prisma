generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  email     String   @unique
  name      String? // Treating this as a nickname

  groupMembers GroupMember[] // A user can be in multiple groups
}

model Group {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now())
  name        String?
  description String?

  groupMembers GroupMember[] // A group can have multiple users
  purchases    Purchase[] // A group makes multiple purchases
}

model GroupMember {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  userId    String   @db.Uuid
  groupId   String   @db.Uuid

  purchases Purchase[] // A groupMember can make multiple purchases (payer)
  expenses  Expense[] // A groupMember can incur multiple expenses (payee)
  user      User       @relation(fields: [userId], references: [id])
  group     Group      @relation(fields: [groupId], references: [id])
}

model Purchase {
  id            String   @id @default(uuid()) @db.Uuid
  createdAt     DateTime @default(now())
  groupId       String   @db.Uuid
  groupMemberId String   @db.Uuid
  amount        Decimal
  title         String

  expenses    Expense[] // Each purchase creates multiple expenses (these are the splits)
  group       Group       @relation(fields: [groupId], references: [id])
  groupMember GroupMember @relation(fields: [groupMemberId], references: [id])
}

model Expense {
  id            String   @id @default(uuid()) @db.Uuid
  createdAt     DateTime @default(now())
  date          DateTime @default(now())
  amount        Decimal
  groupMemberId String   @db.Uuid
  purchaseId    String   @db.Uuid

  groupMember GroupMember @relation(fields: [groupMemberId], references: [id])
  Purchase    Purchase    @relation(fields: [purchaseId], references: [id])
}
