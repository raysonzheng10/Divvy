generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  email     String   @unique

  groupMembers GroupMember[] // A user can be in multiple groups
}

model Group {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now())
  name        String?
  description String?

  groupMembers GroupMember[] // A group can have multiple users
  transactions Transaction[] // A group makes multiple transactions
}

model GroupMember {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  userId    String   @db.Uuid
  groupId   String   @db.Uuid
  nickname  String

  transactions Transaction[] // A groupMember can make multiple transactions (payer)
  expenses     Expense[] // A groupMember can incur multiple expenses (payee)
  user         User          @relation(fields: [userId], references: [id])
  group        Group         @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

model Transaction {
  id            String   @id @default(uuid()) @db.Uuid
  createdAt     DateTime @default(now())
  groupId       String   @db.Uuid
  groupMemberId String   @db.Uuid
  amount        Decimal
  title         String

  expenses    Expense[] // Each transaction creates multiple expenses (these are the splits)
  group       Group       @relation(fields: [groupId], references: [id])
  groupMember GroupMember @relation(fields: [groupMemberId], references: [id])
}

model Expense {
  id            String   @id @default(uuid()) @db.Uuid
  createdAt     DateTime @default(now())
  date          DateTime @default(now())
  amount        Decimal
  groupMemberId String   @db.Uuid
  transactionId String   @db.Uuid

  groupMember GroupMember @relation(fields: [groupMemberId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])
}
